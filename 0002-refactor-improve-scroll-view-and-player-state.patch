From a03908a7422ca86bbf740d619edf9eaf13558ca2 Mon Sep 17 00:00:00 2001
From: Tennyson McCalla <tennyson.mccalla@gmail.com>
Date: Sat, 8 Feb 2025 18:23:44 -0600
Subject: [PATCH 2/3] refactor: improve scroll view and player state

- Enhanced SnapScrollView with better scroll handling and debugging
- Added isLoading state to PlayerState for better loading feedback
- Improved scroll view constraints and content size management
- Added better logging for scroll view events
---
 ReelAI/Models/Player/PlayerState.swift |   1 +
 ReelAI/Views/Feed/SnapScrollView.swift | 180 +++++++++++++++++--------
 2 files changed, 127 insertions(+), 54 deletions(-)

diff --git a/ReelAI/Models/Player/PlayerState.swift b/ReelAI/Models/Player/PlayerState.swift
index 88a672c..9b58d7c 100644
--- a/ReelAI/Models/Player/PlayerState.swift
+++ b/ReelAI/Models/Player/PlayerState.swift
@@ -5,5 +5,6 @@ struct PlayerState {
     var isMuted: Bool = false
     var progress: Double = 0
     var isReadyToPlay: Bool = false
+    var isLoading: Bool = true
     var error: Error?
 }
diff --git a/ReelAI/Views/Feed/SnapScrollView.swift b/ReelAI/Views/Feed/SnapScrollView.swift
index 5c0bc9a..44d7ec5 100644
--- a/ReelAI/Views/Feed/SnapScrollView.swift
+++ b/ReelAI/Views/Feed/SnapScrollView.swift
@@ -1,84 +1,156 @@
 import SwiftUI
 import UIKit
 
-struct SnapScrollView<Content: View>: UIViewRepresentable {
-    let content: Content
-    let onSnap: (Int) -> Void
+struct SnapScrollView: UIViewRepresentable {
     @Binding var currentIndex: Int
-
-    init(currentIndex: Binding<Int>, @ViewBuilder content: () -> Content, onSnap: @escaping (Int) -> Void) {
-        self.content = content()
+    let itemCount: Int
+    let content: () -> AnyView
+    let onSnap: (Int) -> Void
+    
+    init(currentIndex: Binding<Int>, itemCount: Int, @ViewBuilder content: @escaping () -> some View, onSnap: @escaping (Int) -> Void) {
         self._currentIndex = currentIndex
+        self.itemCount = itemCount
+        self.content = { AnyView(content()) }
         self.onSnap = onSnap
     }
-
-    func makeCoordinator() -> Coordinator {
-        Coordinator(self)
-    }
-
-    func makeUIView(context: Context) -> UIScrollView {
+    
+    func makeUIView(context: Context) -> UIView {
+        print("SnapScrollView: Creating container view")
+        // Create a container view
+        let containerView = UIView()
+        containerView.backgroundColor = .black
+        
+        // Create scroll view
         let scrollView = UIScrollView()
         scrollView.delegate = context.coordinator
         scrollView.isPagingEnabled = true
         scrollView.showsVerticalScrollIndicator = false
-        scrollView.bounces = false
-        scrollView.contentInsetAdjustmentBehavior = .never
-
-        let hostView = UIHostingController(rootView: content)
-        hostView.view.translatesAutoresizingMaskIntoConstraints = false
-        hostView.view.backgroundColor = .clear
-
-        scrollView.addSubview(hostView.view)
-
+        scrollView.showsHorizontalScrollIndicator = false
+        scrollView.bounces = true
+        scrollView.alwaysBounceVertical = true
+        scrollView.isScrollEnabled = true
+        scrollView.backgroundColor = .clear
+        
+        // Add scroll view to container
+        containerView.addSubview(scrollView)
+        scrollView.translatesAutoresizingMaskIntoConstraints = false
         NSLayoutConstraint.activate([
-            hostView.view.leadingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.leadingAnchor),
-            hostView.view.trailingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.trailingAnchor),
-            hostView.view.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor),
-            hostView.view.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor),
-            hostView.view.widthAnchor.constraint(equalTo: scrollView.frameLayoutGuide.widthAnchor)
+            scrollView.leadingAnchor.constraint(equalTo: containerView.leadingAnchor),
+            scrollView.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
+            scrollView.topAnchor.constraint(equalTo: containerView.topAnchor),
+            scrollView.bottomAnchor.constraint(equalTo: containerView.bottomAnchor)
         ])
-
-        DispatchQueue.main.async {
-            let height = UIScreen.main.bounds.height * CGFloat(hostView.view.subviews.count)
-            scrollView.contentSize = CGSize(width: UIScreen.main.bounds.width, height: height)
+        
+        // Create content view
+        let hostingController = UIHostingController(rootView: content())
+        hostingController.view.backgroundColor = .clear
+        
+        // Add content view to scroll view
+        scrollView.addSubview(hostingController.view)
+        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
+        
+        // Set up constraints for content
+        NSLayoutConstraint.activate([
+            hostingController.view.leadingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.leadingAnchor),
+            hostingController.view.trailingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.trailingAnchor),
+            hostingController.view.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor),
+            hostingController.view.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor),
+            hostingController.view.widthAnchor.constraint(equalTo: scrollView.frameLayoutGuide.widthAnchor)
+        ])
+        
+        // Set content size
+        let screenHeight = UIScreen.main.bounds.height
+        let contentHeight = CGFloat(itemCount) * screenHeight
+        hostingController.view.heightAnchor.constraint(equalToConstant: contentHeight).isActive = true
+        scrollView.contentSize = CGSize(width: UIScreen.main.bounds.width, height: contentHeight)
+        
+        print("SnapScrollView: Initial setup - content size: \(scrollView.contentSize), isScrollEnabled: \(scrollView.isScrollEnabled)")
+        context.coordinator.scrollView = scrollView
+        return containerView
+    }
+    
+    func updateUIView(_ containerView: UIView, context: Context) {
+        guard let scrollView = context.coordinator.scrollView else { return }
+        
+        // Update content size if needed
+        let screenHeight = UIScreen.main.bounds.height
+        let contentHeight = CGFloat(itemCount) * screenHeight
+        if scrollView.contentSize.height != contentHeight {
+            scrollView.contentSize = CGSize(width: UIScreen.main.bounds.width, height: contentHeight)
+            if let hostView = scrollView.subviews.first {
+                for constraint in hostView.constraints where constraint.firstAttribute == .height {
+                    constraint.constant = contentHeight
+                }
+            }
+        }
+        
+        // Update scroll position if needed
+        let targetOffset = CGFloat(currentIndex) * screenHeight
+        if abs(scrollView.contentOffset.y - targetOffset) > 1 {
+            scrollView.setContentOffset(CGPoint(x: 0, y: targetOffset), animated: true)
         }
-
-        return scrollView
     }
-
-    func updateUIView(_ scrollView: UIScrollView, context: Context) {
-        context.coordinator.parent = self
+    
+    func makeCoordinator() -> Coordinator {
+        Coordinator(self)
     }
-
+    
     class Coordinator: NSObject, UIScrollViewDelegate {
         var parent: SnapScrollView
-        private var isScrolling = false
-
+        weak var scrollView: UIScrollView?
+        private var lastContentOffset: CGFloat = 0
+        
         init(_ parent: SnapScrollView) {
             self.parent = parent
+            super.init()
         }
-
+        
         func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {
-            isScrolling = true
+            print("SnapScrollView: Begin dragging at offset \(scrollView.contentOffset.y)")
         }
-
-        func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
-            let index = Int(scrollView.contentOffset.y / scrollView.bounds.height)
-            if parent.currentIndex != index {
-                parent.currentIndex = index
-                parent.onSnap(index)
+        
+        func scrollViewDidScroll(_ scrollView: UIScrollView) {
+            print("SnapScrollView: Scrolling at offset \(scrollView.contentOffset.y)")
+            let screenHeight = UIScreen.main.bounds.height
+            let currentPage = Int(round(scrollView.contentOffset.y / screenHeight))
+            
+            if currentPage != Int(round(lastContentOffset / screenHeight)) {
+                if currentPage >= 0 && currentPage < parent.itemCount {
+                    print("SnapScrollView: Updating to page \(currentPage)")
+                    parent.currentIndex = currentPage
+                    parent.onSnap(currentPage)
+                }
             }
-            isScrolling = false
+            
+            lastContentOffset = scrollView.contentOffset.y
         }
-
+        
         func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
+            print("SnapScrollView: End dragging, will decelerate: \(decelerate)")
             if !decelerate {
-                let index = Int(scrollView.contentOffset.y / scrollView.bounds.height)
-                if parent.currentIndex != index {
-                    parent.currentIndex = index
-                    parent.onSnap(index)
-                }
-                isScrolling = false
+                snapToNearestPage(scrollView)
+            }
+        }
+        
+        func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
+            print("SnapScrollView: End decelerating")
+            snapToNearestPage(scrollView)
+        }
+        
+        private func snapToNearestPage(_ scrollView: UIScrollView) {
+            let screenHeight = UIScreen.main.bounds.height
+            let page = round(scrollView.contentOffset.y / screenHeight)
+            let targetOffset = page * screenHeight
+            
+            if abs(targetOffset - scrollView.contentOffset.y) > 1 {
+                scrollView.setContentOffset(CGPoint(x: 0, y: targetOffset), animated: true)
+            }
+            
+            let currentPage = Int(page)
+            if currentPage >= 0 && currentPage < parent.itemCount {
+                parent.currentIndex = currentPage
+                parent.onSnap(currentPage)
+                print("SnapScrollView: Snapped to page \(currentPage)")
             }
         }
     }
-- 
2.39.5 (Apple Git-154)

